pipeline {
    agent any
    environment {
        DOCKER_TOKEN = credentials('docker-push-secret')
        DOCKER_USER = 'tsadimas'
        DOCKER_SERVER = 'ghcr.io'
        DOCKER_PREFIX = 'ghcr.io/tsadimas/cp-backend'
        DEPLOY_DIR = 'k8s'
        GIT_BRANCH = 'main' // or whatever branch you deploy from
        VAULT_ADDR = 'http://127.0.0.1:8200'
        VAULT_TOKEN = credentials('vault-token')
    }
    stages {
        stage('test') {
            steps {
                sh '''
                    docker compose down --volumes
                    docker compose up backend -d --build
                    while ! wget -S --spider http://localhost:5000/docs; do sleep 1; done
                    docker compose exec backend rm -rf ./migrations
                    docker compose exec backend aerich init -t src.database.config.TORTOISE_ORM
                    docker compose exec backend aerich init-db
                    docker compose exec -T backend tavern-ci tests
                    docker compose down --volumes
                '''
            }
        }

        stage('read secrets') {
            steps {
                    sh '''
                        // Define the Vault URL (adjust if needed)
                        def vaultUrl = 'http://127.0.0.1:8200'  // Replace with your Vault URL

                        // Define the secret path in Vault (adjust if needed)
                        def secretPath = 'secret/jenkins'

                        // Fetch the secret from Vault using curl
                        def response = sh(script: """
                            curl --silent --fail --header "X-Vault-Token: ${VAULT_TOKEN}" \
                                 --request GET \
                                 ${vaultUrl}/v1/${secretPath}
                        """, returnStdout: true).trim()

                        // Check if the response is empty (error handling)
                        if (!response) {
                            error "Failed to fetch secrets from Vault. Response is empty."
                        }

                        // Parse the response (JSON) and extract the secret values
                        def jsonResponse = readJSON text: response
                        def username = jsonResponse.data.username
                        def password = jsonResponse.data.password

                        // Use the secrets in your Jenkins build
                        echo "Vault USERNAME: ${username}"
                        echo "Vault PASSWORD: ${password}"

                        // Optionally, you can use these values as environment variables
                        env.USERNAME = username
                        env.PASSWORD = password
            '''
                  
        }
        }
        stage('docker build and push') {
            steps {
                script {
                    // generate image tag
                    def headCommit = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    env.IMAGE_TAG = "${headCommit}-${env.BUILD_ID}"
                    env.IMAGE_FULL = "${DOCKER_PREFIX}:${IMAGE_TAG}"
                }

                sh '''
                   cd services/backend
                   docker build --rm -t $DOCKER_PREFIX:$IMAGE_TAG -t $DOCKER_PREFIX:latest -f Dockerfile .
                '''

                sh '''
                    echo $DOCKER_TOKEN | docker login $DOCKER_SERVER -u $DOCKER_USER --password-stdin
                    docker push $DOCKER_PREFIX --all-tags
                '''
            }
        }
        stage('update argocd repo') {
            steps {
                script {
                    // Update deployment yaml
                    sh """
                        sed -i 's#\\(image: \\)[^ ]*#\\1${DOCKER_PREFIX}:${IMAGE_TAG}#' ${DEPLOY_DIR}/fastapi/fastapi-deployment.yaml
                    """
                    sh """
                        git fetch origin ${GIT_BRANCH}
                        git checkout ${GIT_BRANCH}
                        git config --global user.email "tsadimas@hua.gr"
                        git config --global user.name "Anargyros Tsadimas"
                        git add ${DEPLOY_DIR}/fastapi/fastapi-deployment.yaml
                        git commit -m "Update fastapi image to ${DOCKER_PREFIX}:${IMAGE_TAG}" || echo "No changes to commit"
                        git push origin ${GIT_BRANCH}
                    """
                    
                }
            }
        }
    }
}