pipeline {
    agent any
    environment {
        DOCKER_TOKEN = credentials('docker-push-secret')
        DOCKER_USER = 'tsadimas'
        DOCKER_SERVER = 'ghcr.io'
        DOCKER_PREFIX = 'ghcr.io/tsadimas/cp-backend'
        DEPLOY_DIR = 'k8s'
        GIT_BRANCH = 'main' // or whatever branch you deploy from
        VAULT_ADDR = 'http://127.0.0.1:8200'
    }
    stages {
        stage('test') {
            steps {
                sh '''
                    docker compose down --volumes
                    docker compose up backend -d --build
                    while ! wget -S --spider http://localhost:5000/docs; do sleep 1; done
                    docker compose exec backend rm -rf ./migrations
                    docker compose exec backend aerich init -t src.database.config.TORTOISE_ORM
                    docker compose exec backend aerich init-db
                    docker compose exec -T backend tavern-ci tests
                    docker compose down --volumes
                '''
            }
        }

        stage('read secrets') {
            steps {
                    withVault(
                        configuration: [
                            vaultUrl: 'http://127.0.0.1:8200',
                            vaultCredentialId: 'vtoken'
                        ],
                        vaultSecrets: [
                            [
                            path: 'secret/jenkins',
                            kvVersion: 1,
                            secretValues: [
                                [envVar: 'USERNAME', vaultKey: 'username'],
                                [envVar: 'PASSWORD', vaultKey: 'password']
                            ]
                            ]
                        ]
                        ) {
                        sh '''
                            echo "Vault USERNAME: $USERNAME"
                            echo "Vault PASSWORD: $PASSWORD"
                        '''
                        }
            }
        }
        stage('docker build and push') {
            steps {
                script {
                    // generate image tag
                    def headCommit = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    env.IMAGE_TAG = "${headCommit}-${env.BUILD_ID}"
                    env.IMAGE_FULL = "${DOCKER_PREFIX}:${IMAGE_TAG}"
                }

                sh '''
                   cd services/backend
                   docker build --rm -t $DOCKER_PREFIX:$IMAGE_TAG -t $DOCKER_PREFIX:latest -f Dockerfile .
                '''

                sh '''
                    echo $DOCKER_TOKEN | docker login $DOCKER_SERVER -u $DOCKER_USER --password-stdin
                    docker push $DOCKER_PREFIX --all-tags
                '''
            }
        }
        stage('update argocd repo') {
            steps {
                script {
                    // Update deployment yaml
                    sh """
                        sed -i 's#\\(image: \\)[^ ]*#\\1${DOCKER_PREFIX}:${IMAGE_TAG}#' ${DEPLOY_DIR}/fastapi/fastapi-deployment.yaml
                    """
                    sh """
                        git fetch origin ${GIT_BRANCH}
                        git checkout ${GIT_BRANCH}
                        git config --global user.email "tsadimas@hua.gr"
                        git config --global user.name "Anargyros Tsadimas"
                        git add ${DEPLOY_DIR}/fastapi/fastapi-deployment.yaml
                        git commit -m "Update fastapi image to ${DOCKER_PREFIX}:${IMAGE_TAG}" || echo "No changes to commit"
                        git push origin ${GIT_BRANCH}
                    """
                    
                }
            }
        }
    }
}